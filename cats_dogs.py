# -*- coding: utf-8 -*-
"""cats_dogs_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OT71N82mX8dt43X-7gENlfzvBQCleMak
"""

from google.colab import drive
drive.mount("gd")

"""## Importing the libraries"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten

import numpy as np
import matplotlib.pyplot as plt

import pandas as pd


print(tf.__version__)

"""## Preparing Training Data"""

training_set = pd.read_csv("gd/My Drive/Convolutional_Neural_Network/Cats_and_Dogs/Dataset/train.csv")


training_imgs = ["{}.jpg".format(x) for x in list(training_set.id)]

training_labels_1 = list(training_set['class_name'])

training_labels_2 = list(training_set['breed'])



training_set = pd.DataFrame( {'Images': training_imgs,'Animal': training_labels_1, 'Breed' : training_labels_2})


training_set.Animal = training_set.Animal.astype(str)

training_set.Breed = training_set.Breed.astype(str)



#Animals = ['Cat', 'Dog']

#cat_breeds = training_set[training_set['Animal'] == 1].Breed.unique()  #[11, 12, 14, 15, 13]

#dog_breeds = training_set[training_set['Animal'] == 2].Breed.unique()  #[21, 22, 23, 25, 24]

training_set['New_class'] = training_set['Animal'] + training_set['Breed']

training_set.head()

"""## Preprocessing Images"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator


train_dataGen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

train_generator = train_dataGen.flow_from_dataframe(dataframe = training_set, directory="gd/My Drive/Convolutional_Neural_Network/Cats_and_Dogs/Dataset/images_train/",
                                                  x_col="Images", y_col="Animal", 
                                                  class_mode="binary", target_size=(256,256), batch_size=32)

"""## Plotting Images"""

X, y = train_generator.next()

plt.plot()
plt.imshow(X[4].reshape(256,256,3), cmap=plt.get_cmap('BrBG_r'))
print(y[0])

"""## Building Convolutional Neural Network

> Indented block
"""

classifier = Sequential()

# First Convolutional layer
classifier.add(Conv2D(filters = 56,kernel_size = (3,3), activation = 'relu', input_shape = (256,256,3)))

classifier.add(MaxPooling2D(pool_size = (2,2)))

#second Convolutional layer
classifier.add(Conv2D(32,(3,3),activation = 'relu'))
classifier.add(MaxPooling2D(pool_size = (2,2)))

#Flattening
classifier.add(Flatten())

# Hidden Layer
classifier.add(Dense(units = 64, activation = 'relu'))

#Output Layer
classifier.add(Dense(units = 10 , activation = 'softmax'))

classifier.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['categorical_accuracy','accuracy'])

classifier.summary()

"""### Training the CNN"""

training_steps = train_generator.n/train_generator.batch_size

#STEP_SIZE_VALID = valid_generator.n//valid_generator.batch_size

classifier.fit_generator(train_generator, epochs = 15, steps_per_epoch = 70 )

"""## Predicting For Test Set

## Preparing Test Data
"""

test_set = pd.read_csv("gd/My Drive/Convolutional_Neural_Network/Cats_and_Dogs/Dataset/test.csv")


test_imgs = ["gd/My Drive/Convolutional_Neural_Network/Cats_and_Dogs/Dataset/images_test/{}.jpg".format(x) for x in list(test_set.id)]


test_set = pd.DataFrame( {'Images': test_imgs })

test_set.head()

"""### Predicting for a single Image"""

from tensorflow.keras.preprocessing import image

img = image.load_img(path=test_set.Images[100],target_size=(256,256,3))#grayscale=True,
img = image.img_to_array(img)
test_img = img.reshape((1,256,256,3))
img_class = classifier.predict_classes(test_img)
prediction = img_class[0]

prediction

classes = train_generator.class_indices
print(classes)

"""### Predicting for the entire test set"""

inverted_classes = dict(map(reversed, classes.items()))

inverted_classes

from keras.preprocessing import image

Y_pred = []
for i in range(len(test_set)):
  img = image.load_img(path= test_set.Images[i],target_size=(256,256,3))#grayscale=True,
  img = image.img_to_array(img)
  test_img = img.reshape((1,256,256,3))
  img_class = classifier.predict_classes(test_img)
  prediction = img_class[0]
  Y_pred.append(prediction)

Y_pred

prediction_classes = [ inverted_classes.get(item,item) for item in Y_pred ]

prediction_classes

animal = []
breed = []
for i in prediction_classes:
  animal.append(i[0])
  breed.append(i[1:])

predictions = {}

predictions['class_name'] = animal

predictions['breed'] = breed

pd.DataFrame(predictions)

"""### Writing into file"""

pd.DataFrame(predictions).to_excel("gd/My Drive/Convolutional_Neural_Network/Cats_and_Dogs/Predictions/cats_dogs_6.xlsx", index = False)